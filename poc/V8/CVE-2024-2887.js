const prefix = "...";
d8.file.execute(`${prefix}/test/mjsunit/wasm/wasm-module-builder.js`);

const builder = new WasmModuleBuilder();

// fill up user defined types in a rec group, so that the total ##type groups## is below kV8MaxWasmTypes
builder.startRecGroup();
for (let i = 0; i < 1000; i++) {
  builder.addType(kSig_i_iii);
}
builder.endRecGroup();

for (let i = 0; i <= 5; i++) {
  builder.addStruct([makeField(kWasmI32, true)]);
}
// tStruct is 1006, same with kWasmExternRef
let tStruct = builder.addStruct([
  makeField(kWasmI32, true),
]);

// create function type has kWasmExternRef as input, ret addr
let tFunc = builder.addType(makeSig([kWasmExternRef], [kWasmI32]));

builder.addFunction('main', tFunc).addBody([
  kExprLocalGet, 0,
  // use `wasmSignedLeb` to wrap a value large than 0xFF
  kGCPrefix, kExprStructGet, ...wasmSignedLeb(tStruct), 0,
]).exportFunc();

const instance = builder.instantiate();

let sb = {foo:42};
%DebugPrint(sb);
%DebugPrint(instance.exports.main(sb));

%SystemBreak();